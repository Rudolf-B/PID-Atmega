#pragma GCC diagnostic ignored "-Wunused-parameter"
#include "RTClib.h"
#include "U8glib.h"

// Add pin definitions for the bi-color LED
#define LED_GREEN 5
#define LED_RED 6
#define NTC A0
#define SDA_PIN A4 // Change this to the pin connected to the SDA line
#define SCL_PIN A5 // Change this to the pin connected to the SCL line

int Setpoint = 0;
int speedNew;
int speedOld;

int res = 0;

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_NO_ACK | U8G_I2C_OPT_FAST); // Fast I2C / TWI

const unsigned char bitmap_center_fill [] PROGMEM = {
  0x00, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x3c, 0x00
};

const unsigned char bitmap_center_outline [] PROGMEM = {
  0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00
};

const unsigned char bitmap_gauge_bg [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0x00, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x46, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x20, 0x60, 0x41, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x60, 0x80, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x20, 0xa0, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x21, 0x20, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x21, 0x20, 0x00, 0x1c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x23, 0xf0, 0x00, 0x36, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x20, 0x20, 0x00, 0x63, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xe0, 0x00, 0x20, 0x20, 0x00, 0x41, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x20, 0x20, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x61, 0xe0, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0c, 0x3c, 0x00, 0x00, 0x23, 0x30, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x64, 0x00, 0x00, 0x22, 0x10, 0x20,
  0x00, 0x00, 0x07, 0xdf, 0x20, 0x40, 0x00, 0x00, 0x40, 0x04, 0x46, 0x00, 0x00, 0x23, 0x30, 0x10,
  0x00, 0x00, 0x04, 0x51, 0xf0, 0xc0, 0x00, 0x00, 0x40, 0x04, 0x42, 0x00, 0x00, 0x21, 0xe0, 0x10,
  0x00, 0x00, 0x04, 0x50, 0xf0, 0xc0, 0x00, 0x00, 0x80, 0x04, 0x42, 0x00, 0x00, 0x23, 0x30, 0x08,
  0x00, 0x00, 0x04, 0x51, 0xd0, 0xc0, 0x00, 0x00, 0x80, 0x04, 0x42, 0x00, 0x00, 0x22, 0x10, 0x0c,
  0x00, 0x00, 0x07, 0xdf, 0x59, 0x40, 0x00, 0x01, 0x80, 0x04, 0x46, 0x00, 0x00, 0x23, 0x30, 0x1c,
  0x00, 0x00, 0x05, 0x10, 0x49, 0x40, 0x00, 0x01, 0xe0, 0x04, 0x64, 0x00, 0x00, 0x21, 0xe0, 0x64,
  0x00, 0x00, 0x04, 0x90, 0x4a, 0x40, 0x00, 0x01, 0x30, 0x04, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x00, 0x04, 0x90, 0x4e, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x04, 0x50, 0x46, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0xc7, 0xff, 0xff, 0xff, 0xfe, 0x0c, 0x40, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe7, 0xc1,
  0xef, 0xff, 0xff, 0xff, 0xff, 0x76, 0xef, 0x74, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x30, 0x61,
  0xef, 0xc7, 0x8f, 0x18, 0x3f, 0x76, 0xef, 0xb4, 0x02, 0x00, 0x00, 0x08, 0x80, 0x00, 0x10, 0x21,
  0xef, 0xbb, 0x76, 0xed, 0xbf, 0x76, 0xef, 0xd7, 0xc7, 0xc0, 0x00, 0x10, 0x40, 0x00, 0x20, 0x4f,
  0xef, 0xfb, 0x7e, 0x0d, 0xff, 0x0e, 0xef, 0xd7, 0xc4, 0x60, 0x00, 0x10, 0x40, 0x00, 0x20, 0x8f,
  0xef, 0xc3, 0x9e, 0xfd, 0xff, 0x7e, 0xef, 0xd4, 0x04, 0x20, 0x00, 0x10, 0x40, 0x00, 0x41, 0x81,
  0xef, 0xbb, 0xe6, 0xfd, 0xff, 0x7e, 0xef, 0xb4, 0x06, 0x60, 0x00, 0x08, 0x80, 0x00, 0x83, 0x01,
  0xef, 0xbb, 0x76, 0xed, 0xff, 0x7e, 0xef, 0x74, 0x03, 0xc0, 0x00, 0x07, 0x00, 0x01, 0x06, 0x01,
  0xc0, 0x81, 0x8f, 0x18, 0xfe, 0x3c, 0x40, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf7, 0xc1,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x1e, 0x01, 0x00, 0x00, 0xc0, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x30, 0x7b, 0xdf, 0x3c, 0xdf, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x1c, 0xcd, 0x1b, 0x66, 0xdb, 0x60, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x06, 0xfd, 0x11, 0x46, 0xd1, 0x60, 0x01, 0xf8, 0x01, 0xe0, 0x00, 0x07, 0x86, 0x00, 0x6c,
  0x00, 0x03, 0xc1, 0x11, 0x46, 0xd1, 0x60, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0xc4, 0x00, 0x18,
  0x00, 0x33, 0xc1, 0x1b, 0x66, 0xd1, 0x60, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x48, 0x00, 0x08,
  0x00, 0x1e, 0x7d, 0xdf, 0x3c, 0xd1, 0x38, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x90, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x9f, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x01, 0x11, 0x80, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x02, 0x10, 0x80, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x04, 0x19, 0x80, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x23, 0xf0, 0x00, 0x0f, 0xcf, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x31, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xe0, 0x00, 0x13, 0xbc, 0x00, 0x3b, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x05, 0x36, 0xb4, 0x00, 0x1e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x07, 0x16, 0xe4, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x16, 0xe4, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x07, 0x16, 0xa4, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1d, 0x13, 0xbc, 0xc0, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0xe1, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x66, 0x00, 0x00
};



const unsigned char bitmap_digit_0 [] PROGMEM = {
  0x0f, 0xff, 0x1f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f,
  0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f,
  0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xfc, 0xff, 0xf8
};

const unsigned char bitmap_digit_1 [] PROGMEM = {
  0x01, 0xf8, 0x03, 0xf8, 0x07, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8,
  0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8,
  0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8,
  0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8
};

const unsigned char bitmap_digit_2 [] PROGMEM = {
  0x0f, 0xfe, 0x1f, 0xff, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f,
  0xfc, 0x3f, 0x00, 0x3f, 0x00, 0x7f, 0x00, 0xff, 0x01, 0xfe, 0x03, 0xfc, 0x0f, 0xf8, 0x1f, 0xf0,
  0x3f, 0xe0, 0x7f, 0xc0, 0xff, 0x00, 0xfe, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char bitmap_digit_3 [] PROGMEM = {
  0x0f, 0xfe, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xf8, 0x3f,
  0xf8, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xfe, 0x00, 0xfc, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xff,
  0x00, 0xff, 0x00, 0x3f, 0x00, 0x3f, 0xf8, 0x3f, 0xf8, 0x3f, 0xf8, 0x3f, 0xfc, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xfc, 0xff, 0xf8
};

const unsigned char bitmap_digit_4 [] PROGMEM = {
  0x00, 0x70, 0x00, 0x78, 0x00, 0xfc, 0x00, 0xfe, 0x01, 0xff, 0x03, 0xff, 0x03, 0xff, 0x07, 0xff,
  0x07, 0xff, 0x0f, 0xff, 0x0f, 0xbf, 0x1f, 0xbf, 0x1f, 0x3f, 0x3f, 0x3f, 0x3e, 0x3f, 0x7e, 0x3f,
  0x7c, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0x7f, 0xff, 0x3f, 0xff, 0x3f, 0xff, 0x1f, 0xff, 0x00, 0x3f,
  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f
};

const unsigned char bitmap_digit_5 [] PROGMEM = {
  0x7f, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xfc, 0x00, 0xfc, 0x00,
  0xfc, 0x00, 0xfc, 0x00, 0xfe, 0x00, 0xff, 0xf0, 0xff, 0xf8, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xff,
  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0x7f, 0xff, 0x3f, 0xff, 0x1f, 0xff
};

const unsigned char bitmap_digit_6 [] PROGMEM = {
  0x0f, 0xfe, 0x1f, 0xff, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f,
  0xfc, 0x3f, 0xfc, 0x00, 0xfc, 0x00, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xff, 0xff,
  0xff, 0xfe, 0xff, 0xfc, 0xff, 0xf8, 0xff, 0xf0
};

const unsigned char bitmap_digit_7 [] PROGMEM = {
  0xff, 0xf0, 0xff, 0xf8, 0xff, 0xfc, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3e, 0xf8, 0x7e,
  0xf8, 0x7e, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x03, 0xf0,
  0x03, 0xf0, 0x07, 0xf0, 0x07, 0xe0, 0x07, 0xe0, 0x0f, 0xc0, 0x0f, 0xc0, 0x0f, 0xc0, 0x1f, 0x80,
  0x1f, 0x80, 0x3f, 0x80, 0x3f, 0x00, 0x3f, 0x00
};

const unsigned char bitmap_digit_8 [] PROGMEM = {
  0x0f, 0xfe, 0x1f, 0xfe, 0x3f, 0xfe, 0x7f, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xfc, 0x3e, 0xfc, 0x3e,
  0xfc, 0x3e, 0xfc, 0x3e, 0xfc, 0x3e, 0xfc, 0x3e, 0xff, 0xfc, 0xff, 0xf8, 0x1f, 0xff, 0x7f, 0xff,
  0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xfc, 0xff, 0xf8
};

const unsigned char bitmap_digit_9 [] PROGMEM = {
  0x07, 0xff, 0x1f, 0xff, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f,
  0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x3f, 0x00, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xfc, 0xff, 0xf8
};

const int bitmap_allArray_LEN = 10;
const unsigned char* bitmap_allArray[10] = {
  bitmap_digit_0,
  bitmap_digit_1,
  bitmap_digit_2,
  bitmap_digit_3,
  bitmap_digit_4,
  bitmap_digit_5,
  bitmap_digit_6,
  bitmap_digit_7,
  bitmap_digit_8,
  bitmap_digit_9
};

int speed = 0; // current speed

char speed_string[10]; // speed number value converted to c-style string (array of characters)
int speed_string_length; // length of the speed_string
int speed_string_start_pos; // start x position for the big numbers - calculated based on the number of digits

int needle_angle_deg = 45; // angle of the needle in degrees, based on potentiometer value

int needle_start_x; // needle start point, x position
int needle_start_y; // needle start point, y position
int needle_end_x; // needle end point, x position
int needle_end_y; // needle end point, y position
int needle_center_x = 95; // needle center position, x position
int needle_center_y = 34; // needle center position, y position
int needle_radius_big = 30;
int needle_radius_small = 10; // lenght of "tail" of the needle
int needle_offset_x; // second line offset x
int needle_offset_y; // second line offset y

void setup() {
  pinMode(2, INPUT);
  pinMode(3, INPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(NTC, INPUT);

  u8g.setFont(u8g_font_tpssb);
  u8g.setColorIndex(1);
  Serial.begin(115200);
  attachInterrupt(0, SETPOINT_UP, FALLING);
  attachInterrupt(1, SETPOINT_DOWN, FALLING);
  delay(100);
  u8g.setContrast(1);
  int Setpoint = 0; // It must be at zero at startup so the 2 Atmega's are in sync

}

void loop() {
  if (speed >= 2095 && speed <= 2105) {
    digitalWrite(LED_GREEN, HIGH);
    digitalWrite(LED_RED, LOW);
   // u8g.setContrast(1);
  } else {
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_RED, HIGH);
    //u8g.setContrast(255);
  }

  if (speed > 2090 && speed < 2110) {
    u8g.setContrast(1);
  } else {
    u8g.setContrast(255);
  }


res++;
if(res >= 100){
  resetI2CBus();
  res = 0;
}

  Serial.begin(115200);//needed so there is not comming dubble data in!
  //delay(15);

  if (Serial.available() > 0) {
    if (Serial.parseInt() > 250) {
      speedNew = Serial.parseInt();
    }
    Serial.end();///////////////////////////needed so there is not comming dubble data in!
  }

  speed = (speedNew + speedOld) / 2;
  speedOld = speed;

//  if (speed > 2091 && speed < 2109 && Setpoint > 2097 && Setpoint < 2103) {
//    speed = (speed + 4200) / 3;
//  }

  itoa (speed, speed_string, 10); // convert speed integer to c-style string speed_string, decimal format
  speed_string_length = strlen(speed_string); // get speed_string length
  speed_string_start_pos = 10 - speed_string_length * 8; // start x position of the big numbers

  needle_angle_deg = map(speed, 0, 2800, 45, 270 + 45); // calculate the angle in degrees based on the speed value, between 45-315

  needle_start_x = needle_radius_big * -sin(radians(needle_angle_deg)) + needle_center_x; // calculate needle start x position
  needle_start_y = needle_radius_big *  cos(radians(needle_angle_deg)) + needle_center_y; // calculate needle start y position

  needle_end_x = needle_radius_small * -sin(radians(needle_angle_deg + 180)) + needle_center_x; // calculate needle end x position
  needle_end_y = needle_radius_small *  cos(radians(needle_angle_deg + 180)) + needle_center_y; // calculate needle end y position

  // calculate offset for the second line for the needle, based on the needle slope
  if ((needle_angle_deg > 45 && needle_angle_deg < 135) || (needle_angle_deg > 225 && needle_angle_deg < 315)) {
    // needle is more horizontal, offset the second line by y
    needle_offset_x = 0;
    needle_offset_y = 1;
  } else {
    // needle is more vertical, offset the second line by x
    needle_offset_x = 1;
    needle_offset_y = 0;
  }

  u8g.firstPage(); // u8g drawing
  do {
    u8g.setFont(u8g_font_courB18r);
    u8g.drawStr(0, 16, speed_string); // draw speed_string, not needed anymore

    u8g.drawBox(12, 52, 39, 12);
    //u8g.drawBox(x, y, wi, h)
    u8g.setColorIndex(0);
    u8g.setFont(u8g_font_unifont);
    u8g.setPrintPos(15, 63);
    u8g.print(Setpoint);
    u8g.setColorIndex(1);
    //        for (int i = 0; i < speed_string_length; i++) { // loop for every speed_string character
    //          // draw the big digit
    //          // subtract value 45 from the character value, since the ASCII value of digit "0" is 48
    //          u8g.drawBitmapP(speed_string_start_pos + 18 * i, 16, 16 / 8, 28, bitmap_allArray[speed_string[i] - 48]);
    //        }

    u8g.drawBitmapP(  0,  0, 128 / 8, 64, bitmap_gauge_bg); // draw gauge background image

    u8g.drawLine(needle_start_x, needle_start_y, needle_end_x, needle_end_y); // draw first line for the needle
    u8g.drawLine(needle_start_x + needle_offset_x, needle_start_y + needle_offset_y, needle_end_x + needle_offset_x, needle_end_y + needle_offset_y); // draw second line for the needle

    u8g.setColorIndex(0); // black color
    //u8g.drawBitmapP( 32, 33,  8 / 8,  8, bitmap_center_fill); // draw needle center cover
    u8g.setColorIndex(1); // white color
    //u8g.drawBitmapP( 32, 33,  8 / 8,  8, bitmap_center_outline); // draw needle center piece

    //u8g.drawBitmapP( 26, 60, 16 / 8,  4, bitmap_upir_logo); // draw upir logo, feel free to comment out and put your own logo here :)

  } while ( u8g.nextPage() ); // draw next page, explained here - https://youtu.be/sFGsYZ0Hszk
}

void SETPOINT_UP() {
  Setpoint++;
}
void SETPOINT_DOWN() {
  Setpoint--;
}
void resetI2CBus() {
  pinMode(SDA_PIN, OUTPUT);
  pinMode(SCL_PIN, OUTPUT);

  digitalWrite(SDA_PIN, HIGH);
  digitalWrite(SCL_PIN, HIGH);

  for (int i = 0; i < 10; i++) {
    digitalWrite(SCL_PIN, LOW);
    delayMicroseconds(5);
    digitalWrite(SCL_PIN, HIGH);
    delayMicroseconds(5);
  }

  // Reinitialize the Wire library
  Wire.begin();
}
